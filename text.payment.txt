const axios = require("axios");

const ZOHO_ACCOUNT_ID = process.env.ZOHO_ACCOUNT_ID;
const ZOHO_REFRESH_TOKEN = "1000.b0b044da14ad0d8757fa790f50900763.3055ea241cf43c643ab6a8f853a41435"; // Use your actual refresh token here
const ZOHO_CLIENT_ID = process.env.PAYMENT2_CLIENT_ID;
const ZOHO_CLIENT_SECRET = process.env.PAYMENT2_CLIENT_SECRET;
const ZOHO_PAYMENT_API = process.env.PAYMENT2_API;
const ZOHO_REDIRECT_URI = process.env.ZOHO_REDIRECT_URI; // Redirect URI from Zoho OAuth setup

let ZOHO_ACCESS_TOKEN = null; // Initialize the access token variable

// Step 2: Generate a new access token using the refresh token
const getNewAccessToken = async () => {
  try {
    const response1 = await axios.post(
      "https://accounts.zoho.in/oauth/v2/token",
      new URLSearchParams({
        code: "1000.e89c32d31b359a576c1d47fd77072e0b.353c1f74a2216eb326054742302e52ab", // The code you get after user authorization
        client_id: ZOHO_CLIENT_ID,
        client_secret: ZOHO_CLIENT_SECRET,
        redirect_uri: ZOHO_REDIRECT_URI, // Ensure this is the same as the one registered
        grant_type: "authorization_code", // Grant type for initial token generation
      }).toString(),
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
      }
    );

    console.log("Authorization response:", response1.data);

    // Extract and return the new access token using the refresh token
    const response = await axios.post(
      "https://accounts.zoho.in/oauth/v2/token",
      null,
      {
        params: {
          refresh_token: response1.data.refresh_token,
          client_id: ZOHO_CLIENT_ID,
          client_secret: ZOHO_CLIENT_SECRET,
          grant_type: "refresh_token", // Correct grant type for using refresh token
        },
      }
    );

    console.log("New access token received:", response.data);
    ZOHO_ACCESS_TOKEN = response.data.access_token; // Update the global access token
    return ZOHO_ACCESS_TOKEN;
  } catch (error) {
    console.error("Error generating access token:", error.response?.data || error.message);
    throw new Error("Failed to generate access token");
  }
};

// Function to create a payment session
exports.createSchoolSession = async (req, res) => {
  try {
    const { currency, amount } = req.body;

    // Validate input
    if (!currency || !amount) {
      return res.status(400).json({ error: "Currency and amount are required" });
    }

    // Ensure we have a valid access token
    if (!ZOHO_ACCESS_TOKEN) {
      console.log("No access token found, generating a new one...");
      await getNewAccessToken(); // Use the stored refresh token
    } else {
      console.log("Using existing access token");
    }

    // Log access token to verify it's correctly set
    console.log("Access token used for request:", ZOHO_ACCESS_TOKEN);

    const config = {
      headers: {
        Authorization: `Zoho-oauthtoken ${ZOHO_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    };

    const payload = {
      currency,
      amount,
    };

    // Attempt to create a payment session
    let response;
    try {
      response = await axios.post(ZOHO_PAYMENT_API, payload, config);
    } catch (error) {
      // Handle token expiry and retry the request
      if (error.response?.status === 401) {
        console.log("Access token expired. Generating a new one...");
        await getNewAccessToken(); // Generate a new access token
        config.headers.Authorization = `Zoho-oauthtoken ${ZOHO_ACCESS_TOKEN}`;
        response = await axios.post(ZOHO_PAYMENT_API, payload, config); // Retry the request
      } else {
        throw error; // Re-throw if it's not a token expiry issue
      }
    }

    res.status(200).json(response.data);
  } catch (error) {
    if (error.response) {
      console.error("API Error Response:", error.response);
      res.status(error.response.status).json(error);
    } else {
      console.error("Unexpected Error:", error.message);
      res.status(500).json({ error: "An unexpected error occurred" });
    }
  }
};
all is good make a condtion response1 is hit when accesstoken expired